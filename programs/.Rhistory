}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res
} else {
""
}
})
names(deps) = pkgs
neuro_deps = lapply(deps, function(x) {
x[ x %in% pkgs ]
})
dep_mat = sapply(neuro_deps, function(x){
pkgs %in% x
})
rownames(dep_mat) = pkgs
ograph = graph_from_adjacency_matrix(
dep_mat,
mode = "directed")
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res
} else {
""
}
})
names(deps) = pkgs
neuro_deps = lapply(deps, function(x) {
x[ x %in% pkgs ]
})
dep_mat = sapply(neuro_deps, function(x){
pkgs %in% x
})
rownames(dep_mat) = pkgs
ograph = graph_from_adjacency_matrix(
dep_mat,
mode = "directed")
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
split_remotes <- function(x) {
trimws(unlist(strsplit(x, ",[[:space:]]*")))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res
} else {
""
}
})
names(deps) = pkgs
neuro_deps = lapply(deps, function(x) {
x[ x %in% pkgs ]
})
dep_mat = sapply(neuro_deps, function(x){
pkgs %in% x
})
rownames(dep_mat) = pkgs
ograph = graph_from_adjacency_matrix(
dep_mat,
mode = "directed")
plot(ograph)
?graph_from_adjacency_matrix
library(networkD3)
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
library(networkD3)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
split_remotes <- function(x) {
trimws(unlist(strsplit(x, ",[[:space:]]*")))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res
} else {
""
}
})
names(deps) = pkgs
deps
tab = mapply(function(pack, dep){
cbind(pack, dep)
}, pkgs, deps)
tab
tab = do.call("rbind", tab)
tab
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
library(networkD3)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
split_remotes <- function(x) {
trimws(unlist(strsplit(x, ",[[:space:]]*")))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res
} else {
""
}
})
names(deps) = pkgs
tab = mapply(function(pack, dep){
cbind(pack, dep)
}, pkgs, deps)
tab = do.call("rbind", tab)
colnames(tab) = c("target", "src")
neuro_deps = lapply(deps, function(x) {
x[ x %in% pkgs ]
})
dep_mat = sapply(neuro_deps, function(x){
pkgs %in% x
})
rownames(dep_mat) = pkgs
ograph = graph_from_adjacency_matrix(
dep_mat,
mode = "directed")
plot(ograph)
?simpleNetwork
simpleNetwork(tab)
tab = data.frame(tab, stringsAsFactors = FALSE)
simpleNetwork(tab)
tab = mapply(function(pack, dep){
cbind(pack, dep)
}, pkgs, deps)
tab = do.call("rbind", tab)
colnames(tab) = c("target", "src")
tab = data.frame(tab, stringsAsFactors = FALSE)
tab = tab[, c("src", "target")]
simpleNetwork(tab)
tab = mapply(function(pack, dep){
cbind(pack, dep)
}, pkgs, deps)
tab = do.call("rbind", tab)
colnames(tab) = c("target", "source")
tab = data.frame(tab, stringsAsFactors = FALSE)
tab = tab[, c("source", "target")]
neuro_tab = tab[ tab$target %in% pkgs, ]
simpleNetwork(neuro_tab)
neuro_tab = tab[ tab$source %in% pkgs, ]
simpleNetwork(neuro_tab)
?radialNetwork
tb
tab
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
library(networkD3)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
split_remotes <- function(x) {
trimws(unlist(strsplit(x, ",[[:space:]]*")))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests")
deps = sapply(info, function(xx) {
print(xx$Package)
res = xx[dep_grab]
res = unlist(res)
if (length(res) > 0) {
res = split_remotes(res)
res = sapply(strsplit(res, " "), `[`, 1)
res = setdiff(res, "R")
res = setdiff(res, "")
res
} else {
""
}
})
names(deps) = pkgs
neuro_deps = lapply(deps, function(x) {
x[ x %in% pkgs ]
})
dep_mat = sapply(neuro_deps, function(x){
pkgs %in% x
})
rownames(dep_mat) = pkgs
ograph = graph_from_adjacency_matrix(
dep_mat,
mode = "directed")
plot(ograph)
tab = mapply(function(pack, dep){
cbind(pack, dep)
}, pkgs, deps)
tab = do.call("rbind", tab)
colnames(tab) = c("target", "source")
tab = data.frame(tab, stringsAsFactors = FALSE)
tab = tab[, c("source", "target")]
head(tab)
