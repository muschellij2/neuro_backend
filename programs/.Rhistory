type = "source"
suggests = TRUE
enhances = FALSE
includeBasePkgs = FALSE
if (!requireNamespace("igraph")) {
stop(igraphNotAvailableMessage)
}
# if (missing(availPkgs)) {
availPkgs <- pkgAvail(repos = repos, type = type)
# }
pkgs <- availPkgs
rownames(pkgs) <- as.vector(pkgs[, "Package"])
allPkgs <- rownames(pkgs)
if (!length(allPkgs))
stop("no packages in specified repositories")
pkgEdge <- function(p, type = c("Imports", "Depends", "LinkingTo"),
pdb) {
do.call(rbind, lapply(type, function(t) addDepType(p,
t, pdb = pdb)))
}
pkgEdges <- function(pp, type = c("Imports", "Depends", "LinkingTo"),
pdb) {
do.call(rbind, lapply(pp, pkgEdge, type = type, pdb = pdb))
}
pkg_orig <- pkg
if (suggests) {
edges1 <- pkgEdges(pkg, type = c("Suggests"), availPkgs)
p_sug <- unique(unlist(tools::package_dependencies(pkg,
db = availPkgs, which = "Suggests", recursive = FALSE)))
pkg <- unique(c(p_sug, pkg))
}
if (enhances) {
edges2 <- pkgEdges(pkg_orig, type = c("Enhances"), availPkgs)
p_enh <- unique(unlist(tools::package_dependencies(pkg_orig,
db = availPkgs, which = "Enhances", recursive = FALSE)))
pkg <- unique(c(p_enh, pkg))
}
p_dep <- unique(unlist(tools::package_dependencies(pkg, db = availPkgs,
which = c("Imports", "Depends", "LinkingTo"), recursive = TRUE)))
pkg <- unique(c(p_dep, pkg))
edges <- pkgEdges(pkg, type = c("Imports", "Depends", "LinkingTo"),
availPkgs)
if (suggests) {
edges <- rbind(edges, edges1)
}
if (enhances) {
edges <- rbind(edges, edges2)
}
nedges <- nrow(edges)
if (nedges && !includeBasePkgs)
edges <- edges[!(edges[["dep"]] %in% basePkgs()), ]
vert <- unique(c(pkg_orig, edges[["dep"]], edges[["package"]]))
ret <- igraph::graph.data.frame(d = edges, directed = TRUE,
vertices = vert)
addDepType
source('~/.active-rstudio-document')
ret
edges
pkg = "ANTsR"
repos = getOption("repos")
type = "source"
suggests = TRUE
enhances = FALSE
includeBasePkgs = FALSE
addDepType = miniCRAN:::addDepType
if (!requireNamespace("igraph")) {
stop(igraphNotAvailableMessage)
}
# if (missing(availPkgs)) {
availPkgs <- pkgAvail(repos = repos, type = type)
# }
pkgs <- availPkgs
rownames(pkgs) <- as.vector(pkgs[, "Package"])
allPkgs <- rownames(pkgs)
if (!length(allPkgs))
stop("no packages in specified repositories")
pkgEdge <- function(p, type = c("Imports", "Depends", "LinkingTo"),
pdb) {
do.call(rbind, lapply(type, function(t) addDepType(p,
t, pdb = pdb)))
}
pkgEdges <- function(pp, type = c("Imports", "Depends", "LinkingTo"),
pdb) {
do.call(rbind, lapply(pp, pkgEdge, type = type, pdb = pdb))
}
pkg_orig <- pkg
if (suggests) {
edges1 <- pkgEdges(pkg, type = c("Suggests"), availPkgs)
p_sug <- unique(unlist(tools::package_dependencies(pkg,
db = availPkgs, which = "Suggests", recursive = FALSE)))
pkg <- unique(c(p_sug, pkg))
}
if (enhances) {
edges2 <- pkgEdges(pkg_orig, type = c("Enhances"), availPkgs)
p_enh <- unique(unlist(tools::package_dependencies(pkg_orig,
db = availPkgs, which = "Enhances", recursive = FALSE)))
pkg <- unique(c(p_enh, pkg))
}
p_dep <- unique(unlist(tools::package_dependencies(pkg, db = availPkgs,
which = c("Imports", "Depends", "LinkingTo"), recursive = TRUE)))
pkg <- unique(c(p_dep, pkg))
edges <- pkgEdges(pkg, type = c("Imports", "Depends", "LinkingTo"),
availPkgs)
if (suggests) {
edges <- rbind(edges, edges1)
}
if (enhances) {
edges <- rbind(edges, edges2)
}
nedges <- nrow(edges)
if (nedges && !includeBasePkgs)
edges <- edges[!(edges[["dep"]] %in% basePkgs()), ]
vert <- unique(c(pkg_orig, edges[["dep"]], edges[["package"]]))
ret <- igraph::graph.data.frame(d = edges, directed = TRUE,
vertices = vert)
ret
a
plot(a)
?makeDepGraph("ANTsR")
source('~/.active-rstudio-document')
makeDepGraph(pkg)
x = makeDepGraph(pkg)
plot9x
plot(x)
edges
vert
##########################################
# Graph of all Networks
##########################################
rm( list = ls())
library(git2r)
library(devtools)
library(gh)
library(igraph)
library(networkD3)
read_dcf <- function(path, rewrite = TRUE) {
file = file(path)
on.exit({
close(file)
})
fields <- colnames(read.dcf(file))
dcf = as.list(read.dcf(file, keep.white = fields, all = TRUE)[1, ])
return(list(fields = fields,
dcf = dcf))
}
split_remotes <- function(x) {
trimws(unlist(strsplit(x, ",[[:space:]]*")))
}
get_all_repos = function() {
my_repos <- gh("GET /users/:username/repos",
username = "neuroconductor")
}
get_repo_names = function() {
repos = get_all_repos()
sapply(repos, `[[`, "name")
}
repos = get_repo_names()
repos = paste0("neuroconductor/", repos)
remote_package_info = function(remote,
url = "https://github.com", ...) {
tmp <- tempfile()
path <- paste(c(remote$username,
remote$repo, "raw", remote$ref,
remote$subdir, "DESCRIPTION"),
collapse = "/")
req <- httr::GET(url, path = path,
httr::write_disk(path = tmp))
if (httr::status_code(req) >= 400) {
L = list(Package = NA,
Version = NA)
return(L)
}
x = read_dcf(tmp)$dcf
return(x)
}
get_pkg_info = function(stub){
remote = devtools:::github_remote(stub)
pkg = remote_package_info(remote)
return(pkg)
}
info = sapply(repos, get_pkg_info)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests",
"Enhances")
tdeps = lapply(info, function(xx) {
run_pack = xx$Package
print(run_pack)
grab = names(xx) %in% dep_grab
if (any(grab)) {
res = xx[grab]
res = lapply(res, function(x) {
if (length(x) > 0) {
return(split_remotes(x))
} else {
return("")
}
})
tab = mapply(function(pack, dep){
cbind(dep_type = pack, dep = dep)
}, names(res), res, SIMPLIFY = FALSE)
tab = do.call("rbind", tab)
tab = data.frame(tab, stringsAsFactors = FALSE)
tab$package = run_pack
return(tab)
} else {
tab = data.frame(package = run_pack, dep_type = "", dep = "")
}
})
tdeps = do.call("rbind", tdeps)
rownames(tdeps) = NULL
head(tdeps)
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests",
"Enhances")
tdeps = lapply(info, function(xx) {
run_pack = xx$Package
print(run_pack)
grab = names(xx) %in% dep_grab
if (any(grab)) {
res = xx[grab]
res = lapply(res, function(x) {
if (length(x) > 0) {
return(split_remotes(x))
} else {
return("")
}
})
tab = mapply(function(pack, dep){
cbind(type = pack, dep = dep)
}, names(res), res, SIMPLIFY = FALSE)
tab = do.call("rbind", tab)
tab = data.frame(tab, stringsAsFactors = FALSE)
tab$package = run_pack
return(tab)
} else {
tab = data.frame(package = run_pack, type = "", dep = "")
}
})
tdeps = do.call("rbind", tdeps)
rownames(tdeps) = NULL
head(dteps)
head(tdeps)
edges = tdeps[, c("dep", "package", "type")]
vert = sort(unique(c(edges$dep, edges$package))
ret <- igraph::graph.data.frame(d = edges, directed = TRUE,
vertices = vert)
edges = tdeps[, c("dep", "package", "type")]
vert = sort(unique(c(edges$dep, edges$package)))
edges
vert
tdeps$package
tdeps$dep
tdeps$dep = sapply(strsplit(tdeps$dep), `[`, 1)
tdeps$dep = sapply(strsplit(tdeps$dep, " "), `[`, 1)
tdeps
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests",
"Enhances")
tdeps = lapply(info, function(xx) {
run_pack = xx$Package
print(run_pack)
grab = names(xx) %in% dep_grab
if (any(grab)) {
res = xx[grab]
res = lapply(res, function(x) {
if (length(x) > 0) {
return(split_remotes(x))
} else {
return("")
}
})
tab = mapply(function(pack, dep){
cbind(type = pack, dep = dep)
}, names(res), res, SIMPLIFY = FALSE)
tab = do.call("rbind", tab)
tab = data.frame(tab, stringsAsFactors = FALSE)
tab$package = run_pack
return(tab)
} else {
tab = data.frame(package = run_pack, type = "", dep = "")
}
})
tdeps = do.call("rbind", tdeps)
rownames(tdeps) = NULL
tdeps$dep = sapply(strsplit(tdeps$dep, " "), `[`, 1)
tdeps = tdeps[ !tdeps$dep %in% c("R"), ]
edges = tdeps[, c("dep", "package", "type")]
vert = sort(unique(c(edges$dep, edges$package)))
edges
vert
pkgs = sapply(info, function(x) {
x$Package
})
dep_grab = c("Depends", "Imports",
"LinkingTo", "Suggests",
"Enhances")
tdeps = lapply(info, function(xx) {
run_pack = xx$Package
print(run_pack)
grab = names(xx) %in% dep_grab
if (any(grab)) {
res = xx[grab]
res = lapply(res, function(x) {
if (length(x) > 0) {
return(split_remotes(x))
} else {
return("")
}
})
tab = mapply(function(pack, dep){
cbind(type = pack, dep = dep)
}, names(res), res, SIMPLIFY = FALSE)
tab = do.call("rbind", tab)
tab = data.frame(tab, stringsAsFactors = FALSE)
tab$package = run_pack
return(tab)
} else {
tab = data.frame(package = run_pack, type = "", dep = "")
}
})
tdeps = do.call("rbind", tdeps)
rownames(tdeps) = NULL
tdeps$dep = sapply(strsplit(tdeps$dep, " "), `[`, 1)
tdeps = tdeps[ !tdeps$dep %in% c("R"), ]
edges = tdeps[, c("dep", "package", "type")]
vert = sort(unique(c(edges$dep, edges$package)))
edges = edges[ !is.na(edges$dep), ]
edges = edges[ !edges$type %in% "", ]
edges
ret <- igraph::graph.data.frame(d = edges,
directed = TRUE,
vertices = vert)
class(ret) <- c("pkgDepGraph", "igraph")
attr(ret, "pkgs") <- pkgs
plot(ret)
attr(ret, "pkgs") <- "Neuroconductor"
plot(ret)
png("network_depgraph.png",
height = 7, width = 7,
units = "in", res = 300)
plot(ret, vertex.size = 20)
dev.off()
png("network_depgraph.png",
height = 5, width = 10,
units = "in", res = 300)
plot(ret, vertex.size = 20)
dev.off()
png("network_depgraph.png",
height = 5, width = 10,
units = "in", res = 300)
plot(ret, vertex.size = 10, cex = 0.7)
dev.off()
attr(ret, "pkgs") <- pkgs
png("network_depgraph.png",
height = 5, width = 10,
units = "in", res = 300)
plot(ret, vertex.size = 10, cex = 0.7)
dev.off()
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
png("network_depgraph.png",
height = 10, width = 20,
units = "in", res = 300)
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
dev.off()
png("network_depgraph.png",
height = 10, width = 20,
units = "in", res = 300)
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
dev.off()
png("network_depgraph.png",
height = 10, width = 20,
units = "in", res = 300)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
system('open ./')
png("network_depgraph.png",
height = 7, width = 20,
units = "in", res = 300)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
png("network_depgraph.png",
height = 7, width = 15,
units = "in", res = 300)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
png("network_depgraph.png",
height = 5, width = 20,
units = "in", res = 300)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
?knitr::plot_crop()
?knitr::plot_crop
?pdf
pdfname = "network_depgraph.pdf"
pdf(pdfname,
height = 5, width = 20)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
knitr::plot_crop(pdfname)
pdfname = "network_depgraph.pdf"
pdf(pdfname,
height = 10, width = 20)
starting.par.settings <- par(no.readonly = TRUE)
par(
oma = c(0, 0, 0, 0),
mar = rep(0, 4))
plot(ret, vertex.size = 10, cex = 0.7, main = "Neuroconductor")
mfg.settings <- par()$mfg
par(starting.par.settings)
par(mfg = mfg.settings, new = FALSE)
dev.off()
knitr::plot_crop(pdfname)
source('~/Dropbox/Projects/Neuroconductor/programs/network_graph.R')
if (have_fs()) {
infile = file.path(fs_subj_dir(),
"bert", "surf", "rh.pial")
right_triangles = surface_to_triangles(infile = infile)
infile = file.path(fs_subj_dir(),
"bert", "surf", "lh.pial")
left_triangles = surface_to_triangles(infile = infile)
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.open()
rgl::rgl.triangles(right_triangles,
color = rainbow(nrow(right_triangles)))
rgl::rgl.triangles(left_triangles,
color = rainbow(nrow(left_triangles)))
}
infile = file.path(fs_subj_dir(),
"bert", "surf", "rh.inflated")
right_triangles = surface_to_triangles(infile = infile)
infile = file.path(fs_subj_dir(),
"bert", "surf", "lh.inflated")
left_triangles = surface_to_triangles(infile = infile)
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.open()
rgl::rgl.triangles(left_triangles,
color = rainbow(nrow(left_triangles)))
rgl::rgl.triangles(right_triangles,
color = rainbow(nrow(right_triangles)))
}
library(freesurfer)
if (have_fs()) {
infile = file.path(fs_subj_dir(),
"bert", "surf", "rh.pial")
right_triangles = surface_to_triangles(infile = infile)
infile = file.path(fs_subj_dir(),
"bert", "surf", "lh.pial")
left_triangles = surface_to_triangles(infile = infile)
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.open()
rgl::rgl.triangles(right_triangles,
color = rainbow(nrow(right_triangles)))
rgl::rgl.triangles(left_triangles,
color = rainbow(nrow(left_triangles)))
}
infile = file.path(fs_subj_dir(),
"bert", "surf", "rh.inflated")
right_triangles = surface_to_triangles(infile = infile)
infile = file.path(fs_subj_dir(),
"bert", "surf", "lh.inflated")
left_triangles = surface_to_triangles(infile = infile)
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.open()
rgl::rgl.triangles(left_triangles,
color = rainbow(nrow(left_triangles)))
rgl::rgl.triangles(right_triangles,
color = rainbow(nrow(right_triangles)))
}
